# -*- coding: utf-8 -*-
"""weighbridge_dashboard_v1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j060gwiB2tI-_T7KSxoClNTzJAT0bGxd
"""

import streamlit as st
import pandas as pd
import folium
from streamlit_folium import folium_static
import plotly.express as px
from datetime import datetime

# Sample data
data = [
    {
        "scale_id": "SCL001",
        "location_name": "Nairobi",
        "latitude": -1.2921,
        "longitude": 36.8219,
        "last_maintenance": "2025-04-10",
        "status": "operational",
        "last_weight_reading": 1234.5,
        "last_updated": "2025-05-23T10:20:00"
    },
    {
        "scale_id": "SCL002",
        "location_name": "Mombasa",
        "latitude": -4.0435,
        "longitude": 39.6682,
        "last_maintenance": "2025-03-15",
        "status": "offline",
        "last_weight_reading": 0.0,
        "last_updated": "2025-05-20T08:15:00"
    },
    {
        "scale_id": "SCL003",
        "location_name": "Kisumu",
        "latitude": -0.0917,
        "longitude": 34.7679,
        "last_maintenance": "2025-02-28",
        "status": "error",
        "last_weight_reading": 0.0,
        "last_updated": "2025-05-21T12:45:00"
    }
]

# Convert to DataFrame
df = pd.DataFrame(data)

# Convert dates to datetime objects
df['last_maintenance'] = pd.to_datetime(df['last_maintenance'])
df['last_updated'] = pd.to_datetime(df['last_updated'])

# Calculate days since last maintenance
df['days_since_maintenance'] = (datetime.now() - df['last_maintenance']).dt.days

# Dashboard title
st.title("Weighing Scale Monitoring Dashboard")

# Sidebar filters
st.sidebar.header("Filters")
status_filter = st.sidebar.multiselect(
    "Filter by status:",
    options=df['status'].unique(),
    default=df['status'].unique()
)

location_filter = st.sidebar.multiselect(
    "Filter by location:",
    options=df['location_name'].unique(),
    default=df['location_name'].unique()
)

# Apply filters
filtered_df = df[
    (df['status'].isin(status_filter)) &
    (df['location_name'].isin(location_filter))
]

# Display metrics
col1, col2, col3 = st.columns(3)
col1.metric("Total Scales", len(filtered_df))
col2.metric("Operational", len(filtered_df[filtered_df['status'] == 'operational']))
col3.metric("Needing Maintenance", len(filtered_df[filtered_df['days_since_maintenance'] > 60]))

# Interactive map
st.subheader("Scale Locations")
if not filtered_df.empty:
    # Create map centered on Kenya
    m = folium.Map(location=[-0.0236, 37.9062], zoom_start=6)

    # Add markers for each scale
    for idx, row in filtered_df.iterrows():
        # Customize marker color based on status
        if row['status'] == 'operational':
            color = 'green'
        elif row['status'] == 'offline':
            color = 'gray'
        else:
            color = 'red'

        popup_text = f"""
        <b>Scale ID:</b> {row['scale_id']}<br>
        <b>Location:</b> {row['location_name']}<br>
        <b>Status:</b> {row['status']}<br>
        <b>Last Weight:</b> {row['last_weight_reading']} kg<br>
        <b>Last Updated:</b> {row['last_updated'].strftime('%Y-%m-%d %H:%M')}
        """

        folium.Marker(
            location=[row['latitude'], row['longitude']],
            popup=folium.Popup(popup_text, max_width=250),
            icon=folium.Icon(color=color, icon='scale-balanced', prefix='fa')
        ).add_to(m)

    # Display the map
    folium_static(m, width=800, height=500)
else:
    st.warning("No scales match the selected filters.")

# Data table
st.subheader("Scale Data")
st.dataframe(filtered_df.style.applymap(
    lambda x: 'background-color: green' if x == 'operational' else
    ('background-color: red' if x == 'error' else
     'background-color: gray'),
    subset=['status']
))

# Weight readings chart
st.subheader("Weight Readings")
if not filtered_df.empty:
    fig = px.bar(
        filtered_df,
        x='location_name',
        y='last_weight_reading',
        color='status',
        labels={'location_name': 'Location', 'last_weight_reading': 'Weight (kg)'},
        title='Current Weight Readings by Location'
    )
    st.plotly_chart(fig)
else:
    st.warning("No data to display for the selected filters.")

# Maintenance status
st.subheader("Maintenance Status")
if not filtered_df.empty:
    fig = px.scatter(
        filtered_df,
        x='last_maintenance',
        y='location_name',
        color='status',
        size='days_since_maintenance',
        labels={'last_maintenance': 'Last Maintenance Date', 'location_name': 'Location'},
        title='Maintenance Status (Size indicates days since last maintenance)'
    )
    st.plotly_chart(fig)
else:
    st.warning("No data to display for the selected filters.")